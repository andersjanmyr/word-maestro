// Generated by CoffeeScript 1.4.0
(function() {

  this.WordMaestro = (function() {

    function WordMaestro(words, alfabet) {
      this.words = words;
      this.alfabet = alfabet;
    }

    WordMaestro.prototype.findWord = function(pattern) {
      var found, word, words;
      words = this.expandPattern(pattern);
      found = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          word = words[_i];
          if (this.binarySearch(this.words, word) > 0) {
            _results.push(word);
          }
        }
        return _results;
      }).call(this);
      return found;
    };

    WordMaestro.prototype.expandPattern = function(pattern) {
      var alfabet, alfalen, expand, words;
      words = [];
      alfabet = this.alfabet;
      alfalen = this.alfabet.length;
      expand = function(pattern) {
        var chars, i, j, len, newPattern, _i, _results;
        if (pattern.indexOf('?') === -1) {
          words.push(pattern);
          return;
        }
        chars = pattern.split('');
        len = chars.length;
        _results = [];
        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
          if (chars[i] === '?') {
            _results.push((function() {
              var _j, _results1;
              _results1 = [];
              for (j = _j = 0; 0 <= alfalen ? _j < alfalen : _j > alfalen; j = 0 <= alfalen ? ++_j : --_j) {
                chars.splice(i, 1, alfabet[j]);
                newPattern = chars.join('');
                _results1.push(expand(newPattern));
              }
              return _results1;
            })());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      expand(pattern);
      return this.unique(words);
    };

    WordMaestro.prototype.unique = function(list) {
      var key, len, output, value, _i, _results;
      if (list.length < 2) {
        return list;
      }
      output = {};
      len = list.length;
      for (key = _i = 0; 0 <= len ? _i < len : _i > len; key = 0 <= len ? ++_i : --_i) {
        output[list[key]] = list[key];
      }
      _results = [];
      for (key in output) {
        value = output[key];
        _results.push(value);
      }
      return _results;
    };

    WordMaestro.prototype.binarySearch = function(items, value) {
      var pivot, start, stop;
      value = value.toLowerCase();
      start = 0;
      stop = items.length - 1;
      pivot = Math.floor((start + stop) / 2);
      while (items[pivot] !== value && start < stop) {
        if (value < items[pivot]) {
          stop = pivot - 1;
        }
        if (value > items[pivot]) {
          start = pivot + 1;
        }
        pivot = Math.floor((stop + start) / 2);
      }
      if (items[pivot] === value) {
        return pivot;
      } else {
        return -1;
      }
    };

    WordMaestro.prototype.flatten = function(wordss) {
      return [].concat.apply([], wordss);
    };

    WordMaestro.prototype.findPermutedWord = function(word) {
      var perm, permutations, wordss;
      permutations = this.unique(this.permuteWord(word));
      wordss = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = permutations.length; _i < _len; _i++) {
          perm = permutations[_i];
          _results.push(this.findWord(perm));
        }
        return _results;
      }).call(this);
      return this.unique(this.flatten(wordss));
    };

    WordMaestro.prototype.permuteWord = function(word) {
      var permArr, permute, usedChars;
      permArr = [];
      usedChars = [];
      permute = function(word) {
        var ch, chars, i, len, _i, _results;
        if (word === '') {
          return;
        }
        chars = word.split('');
        len = chars.length;
        _results = [];
        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
          ch = chars.splice(i, 1)[0];
          usedChars.push(ch);
          if (chars.length === 0) {
            permArr.push(usedChars.join(""));
          }
          permute(chars.join(''));
          chars.splice(i, 0, ch);
          _results.push(usedChars.pop());
        }
        return _results;
      };
      permute(word);
      return permArr;
    };

    WordMaestro.prototype.shortenWord = function(originalWord) {
      var shorten, words;
      words = [];
      shorten = function(word) {
        var ch, chars, i, len, _i, _results;
        if (word === '') {
          return;
        }
        words.push(word);
        chars = word.split('');
        len = chars.length;
        _results = [];
        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
          ch = chars.splice(i, 1);
          shorten(chars.join(''));
          _results.push(chars.splice(i, 0, ch));
        }
        return _results;
      };
      shorten(originalWord);
      return this.unique(words).sort(function(a, b) {
        return b.length - a.length;
      });
    };

    WordMaestro.prototype.findPermutedAndShortendWord = function(word) {
      var short, shorts, words, _i, _len;
      shorts = this.shortenWord(word);
      words = [];
      for (_i = 0, _len = shorts.length; _i < _len; _i++) {
        short = shorts[_i];
        words = words.concat(this.findPermutedWord(short));
        if (words.length > 10) {
          break;
        }
      }
      return this.unique(words);
    };

    return WordMaestro;

  })();

}).call(this);
