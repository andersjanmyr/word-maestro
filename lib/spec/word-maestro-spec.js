// Generated by CoffeeScript 1.8.0
(function() {
  describe('WordMaestro', function() {
    beforeEach(function() {
      return this.wm = new WordMaestro(WORDS, 'abcdefghijklmnoprstuvxyzåäö', '138113231732312411143878444');
    });
    describe('findWord', function() {
      it('should find a matching word', function() {
        return expect(this.wm.findWord('elefanternas')).toEqual(['elefanternas']);
      });
      it('should find a matching word with ö', function() {
        return expect(this.wm.findWord('ödla')).toEqual(['ödla']);
      });
      return it('should find matching words by regexp', function() {
        return expect(this.wm.findWord('ele???ternas')).toEqual(['elefanternas', 'eleganternas']);
      });
    });
    describe('grepWord', function() {
      it('should find a matching word', function() {
        return expect(this.wm.grepWord('elefanternas')).toEqual(['elefanternas']);
      });
      it('should find a matching word with ö', function() {
        return expect(this.wm.grepWord('ödla')).toEqual(['ödla']);
      });
      return it('should find matching words by regexp', function() {
        return expect(this.wm.grepWord('ele???ternas')).toEqual(['elefanternas', 'eleganternas']);
      });
    });
    describe('permuteWord', function() {
      it('should return [ab, ba] for ab', function() {
        return expect(this.wm.permuteWord('ab')).toEqual(['ab', 'ba']);
      });
      return it('should return an array with length 6', function() {
        return expect(this.wm.permuteWord('abc').length).toBe(6);
      });
    });
    describe('findPermutedWord', function() {
      it('should return [tax] for xat', function() {
        return expect(this.wm.findPermutedWord('xat')).toEqual(['tax']);
      });
      it('should return an array with length 5 for xat?', function() {
        return expect(this.wm.findPermutedWord('xat?').length).toBe(5);
      });
      return it('should return 18 words for ka?o', function() {
        return expect(this.wm.findPermutedWord('ka?o').length).toBe(18);
      });
    });
    describe('binarySearch', function() {
      return it('should return a number for rederi', function() {
        return expect(this.wm.binarySearch(WORDS, 'rederi')).toBeGreaterThan(-1);
      });
    });
    describe('expandPattern', function() {
      it('should return an array with length 27 for one a?', function() {
        return expect(this.wm.expandPattern('a?').length).toBe(27);
      });
      return it('should return an array with length 27*27 for ?a?', function() {
        return expect(this.wm.expandPattern('?a?').length).toBe(27 * 27);
      });
    });
    describe('shortenWord', function() {
      it('should return [ab, b a] for ab', function() {
        return expect(this.wm.shortenWord('ab')).toEqual(['ab', 'b', 'a']);
      });
      return it('should return an array with length 7 for abc', function() {
        return expect(this.wm.shortenWord('abc').length).toBe(7);
      });
    });
    describe('findPermutedAndShortendWord', function() {
      return it('should return permutations for xat', function() {
        return expect(this.wm.findPermutedAndShortendWord('xat')).toEqual(['tax (10)', 'ax (9)', 'ta (2)']);
      });
    });
    describe('findPermutedAndShortendWordLong', function() {
      return it('should return ten (max) words for andersek', function() {
        return expect(this.wm.findPermutedAndShortendWord('andersek').length).toEqual(10);
      });
    });
    describe('findPermutedAndShortendWordö', function() {
      return it('should return permutations for ödla', function() {
        return expect(this.wm.findPermutedAndShortendWord('ödla').length).toEqual(8);
      });
    });
    return describe('calcWordValue', function() {
      it('should return 12 for zoo', function() {
        return expect(this.wm.calcWordValue('zoo')).toEqual(12);
      });
      return it('should return 14 for woo', function() {
        var wm;
        wm = new WordMaestro([], 'wo', 'A2');
        return expect(wm.calcWordValue('woo')).toEqual(14);
      });
    });
  });

}).call(this);
